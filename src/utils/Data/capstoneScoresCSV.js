export const capstoneScore = [
    { capstoneScoreCategory: "Introduction and Project Submission Details", capstoneCriteria: "Presentation and Creativity", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Back-End Development", capstoneCriteria: "Entity Design and Relationships", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Back-End Development", capstoneCriteria: "Java Object-Oriented Programming", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Back-End Development", capstoneCriteria: "Authentication and User Management", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Back-End Development", capstoneCriteria: "CRUD Operations and Data Integrity", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Back-End Development", capstoneCriteria: "Error Handling and Validation", capstonePossiblePoints: 5, capstoneActualPoints: 4, capstoneCriteriaComments: "The method authUserSignup returns plain strings for error messages, which is not a good practice. It should return standardized error responses. Just a tip:- Using general RuntimeException can be improved by defining specific custom exceptions for different error scenarios." },
    { capstoneScoreCategory: "Advanced Back-End Features", capstoneCriteria: "Stream API and JPQL", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Advanced Back-End Features", capstoneCriteria: "Aspect-Oriented Programming and Logging", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Advanced Back-End Features", capstoneCriteria: "Unit testing", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Front-End Development", capstoneCriteria: "Aesthetics and Usability", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Front-End Development", capstoneCriteria: "Components and Navigation", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "Look into PropTypes for type checking and improve accessibility features" },
    { capstoneScoreCategory: "Front-End Development", capstoneCriteria: "Profile Management and Content Interaction", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Front-End Development", capstoneCriteria: "React Architecture and State Management", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "Very nice! Look into Redux for state management alternative" },
    { capstoneScoreCategory: "Front-End Development", capstoneCriteria: "Responsive design", capstonePossiblePoints: 5, capstoneActualPoints: 4, capstoneCriteriaComments: "I am seeing some layouts breaking on small screens" },
    { capstoneScoreCategory: "Front-End Development", capstoneCriteria: "HTML and CSS Best Practices", capstonePossiblePoints: 5, capstoneActualPoints: 3, capstoneCriteriaComments: "Use sematic HTML as much as you can and use proper document title" },
    { capstoneScoreCategory: "Front-End Development", capstoneCriteria: "User Interface and Experience", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Functionality and Code Quality", capstoneCriteria: "Functionality", capstonePossiblePoints: 5, capstoneActualPoints: 4, capstoneCriteriaComments: "The method searchPlaces performs multiple database calls in a loop, which can be inefficient. Consider using a more efficient query or batch processing." },
    { capstoneScoreCategory: "Functionality and Code Quality", capstoneCriteria: "Code Quality", capstonePossiblePoints: 5, capstoneActualPoints: 4, capstoneCriteriaComments: "Hardcoded Values in react: Avoid hardcoding values like image paths. Use imports or a configuration file. Remove Redundant logics for example PlaceService:- The method contains redundant logic for fetching tags for places. This logic can be refactored into a separate private method to avoid duplication." },
    { capstoneScoreCategory: "Functionality and Code Quality", capstoneCriteria: "Adherence to Software Engineering Principles", capstonePossiblePoints: 5, capstoneActualPoints: 5, capstoneCriteriaComments: "Remove Redundant logics for example PlaceService:- The method contains redundant logic for fetching tags for places. This logic can be refactored into a separate private method to avoid duplication." },
    { capstoneScoreCategory: "Version Control and Documentation", capstoneCriteria: "Version Control Practices", capstonePossiblePoints: 2.5, capstoneActualPoints: 5, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Version Control and Documentation", capstoneCriteria: "Documentation Quality", capstonePossiblePoints: 2.5, capstoneActualPoints: 5, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Additional Bonus Features", capstoneCriteria: "Bonus Features (Optional)", capstonePossiblePoints: 5, capstoneActualPoints: 0, capstoneCriteriaComments: "--" },
    { capstoneScoreCategory: "Total", capstoneCriteria: "Total Score", capstonePossiblePoints: 100, capstoneActualPoints: 99, capstoneCriteriaComments: "--" }
  ];
  